name: Deploy SOCBot to Azure

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Required to read the repository
  pull-requests: write  # Required to comment on PRs

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  NODE_VERSION: '20.x'

jobs:
  # Validate infrastructure templates
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login using OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Validate Bicep templates
      run: |
        az deployment group validate \
          --resource-group ${{ secrets.AZURE_RG }} \
          --template-file infra/azure.bicep \
          --parameters @infra/azure.parameters.json \
          --parameters appName=${{ vars.APP_NAME || 'socbot-dev' }}

    - name: Validate Bot Registration template
      run: |
        az deployment group validate \
          --resource-group ${{ secrets.AZURE_RG }} \
          --template-file infra/botRegistration/azurebot.bicep \
          --parameters botAppId=${{ secrets.BOT_APP_ID }} \
          --parameters messagingEndpoint=https://placeholder.azurewebsites.net/api/messages

  # Build and test the application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript compilation
      run: npm run build

    - name: Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests found, skipping test step"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: function-app-build
        path: |
          .
          !node_modules/
          !.git/
          !.github/
        retention-days: 1

  # Deploy infrastructure to development environment
  deploy-infra-dev:
    name: Deploy Infrastructure (Dev)
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'dev'
    environment: 
      name: dev
      url: ${{ steps.deploy-infra.outputs.functionAppUrl }}
    outputs:
      functionAppName: ${{ steps.deploy-infra.outputs.functionAppName }}
      functionAppUrl: ${{ steps.deploy-infra.outputs.functionAppUrl }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login using OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy infrastructure
      id: deploy-infra
      run: |
        deployment_output=$(az deployment group create \
          --resource-group ${{ secrets.AZURE_RG }} \
          --template-file infra/azure.bicep \
          --parameters @infra/azure.parameters.json \
          --parameters appName=${{ vars.APP_NAME || 'socbot-dev' }} \
          --parameters projectConnectionString="${{ secrets.AI_PROJECT_CONNECTION_STRING }}" \
          --parameters agentId="${{ secrets.AI_AGENT_ID }}" \
          --parameters botAppId="${{ secrets.BOT_APP_ID }}" \
          --parameters botAppPassword="${{ secrets.BOT_APP_PASSWORD }}" \
          --parameters m365ClientId="${{ secrets.M365_CLIENT_ID }}" \
          --parameters m365ClientSecret="${{ secrets.M365_CLIENT_SECRET }}" \
          --parameters m365TenantId="${{ secrets.M365_TENANT_ID }}" \
          --parameters aiProjectName="${{ vars.AI_PROJECT_NAME || '' }}" \
          --parameters cognitiveServicesAccountName="${{ vars.COGNITIVE_SERVICES_NAME || '' }}" \
          --query 'properties.outputs' -o json)
        
        echo "Deployment output: $deployment_output"
        
        function_app_name=$(echo $deployment_output | jq -r '.functionAppName.value')
        function_app_hostname=$(echo $deployment_output | jq -r '.functionAppHostName.value')
        
        echo "functionAppName=$function_app_name" >> $GITHUB_OUTPUT
        echo "functionAppUrl=https://$function_app_hostname" >> $GITHUB_OUTPUT

    - name: Deploy Bot Service registration
      run: |
        az deployment group create \
          --resource-group ${{ secrets.AZURE_RG }} \
          --template-file infra/botRegistration/azurebot.bicep \
          --parameters botAppId="${{ secrets.BOT_APP_ID }}" \
          --parameters messagingEndpoint="https://${{ steps.deploy-infra.outputs.functionAppUrl }}/api/messages"

  # Deploy application code to development
  deploy-app-dev:
    name: Deploy Application (Dev)
    runs-on: ubuntu-latest
    needs: deploy-infra-dev
    environment: dev
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: function-app-build

    - name: Azure Login using OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy Function App code
      uses: azure/functions-action@v1
      with:
        app-name: ${{ needs.deploy-infra-dev.outputs.functionAppName }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  # Deploy to production environment
  deploy-infra-prod:
    name: Deploy Infrastructure (Production)
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prod'
    environment: 
      name: production
      url: ${{ steps.deploy-infra.outputs.functionAppUrl }}
    outputs:
      functionAppName: ${{ steps.deploy-infra.outputs.functionAppName }}
      functionAppUrl: ${{ steps.deploy-infra.outputs.functionAppUrl }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login using OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy infrastructure
      id: deploy-infra
      run: |
        deployment_output=$(az deployment group create \
          --resource-group ${{ secrets.AZURE_RG_PROD }} \
          --template-file infra/azure.bicep \
          --parameters @infra/azure.parameters.json \
          --parameters appName=${{ vars.APP_NAME_PROD || 'socbot-prod' }} \
          --parameters projectConnectionString="${{ secrets.AI_PROJECT_CONNECTION_STRING_PROD }}" \
          --parameters agentId="${{ secrets.AI_AGENT_ID_PROD }}" \
          --parameters botAppId="${{ secrets.BOT_APP_ID_PROD }}" \
          --parameters botAppPassword="${{ secrets.BOT_APP_PASSWORD_PROD }}" \
          --parameters m365ClientId="${{ secrets.M365_CLIENT_ID_PROD }}" \
          --parameters m365ClientSecret="${{ secrets.M365_CLIENT_SECRET_PROD }}" \
          --parameters m365TenantId="${{ secrets.M365_TENANT_ID }}" \
          --parameters aiProjectName="${{ vars.AI_PROJECT_NAME_PROD || '' }}" \
          --parameters cognitiveServicesAccountName="${{ vars.COGNITIVE_SERVICES_NAME_PROD || '' }}" \
          --query 'properties.outputs' -o json)
        
        function_app_name=$(echo $deployment_output | jq -r '.functionAppName.value')
        function_app_hostname=$(echo $deployment_output | jq -r '.functionAppHostName.value')
        
        echo "functionAppName=$function_app_name" >> $GITHUB_OUTPUT
        echo "functionAppUrl=https://$function_app_hostname" >> $GITHUB_OUTPUT

    - name: Deploy Bot Service registration
      run: |
        az deployment group create \
          --resource-group ${{ secrets.AZURE_RG_PROD }} \
          --template-file infra/botRegistration/azurebot.bicep \
          --parameters botAppId="${{ secrets.BOT_APP_ID_PROD }}" \
          --parameters messagingEndpoint="https://${{ steps.deploy-infra.outputs.functionAppUrl }}/api/messages"

  deploy-app-prod:
    name: Deploy Application (Production)
    runs-on: ubuntu-latest
    needs: deploy-infra-prod
    environment: production
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: function-app-build

    - name: Azure Login using OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy Function App code
      uses: azure/functions-action@v1
      with:
        app-name: ${{ needs.deploy-infra-prod.outputs.functionAppName }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  # Security and compliance checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Azure Security Center compliance check
      if: github.ref == 'refs/heads/main'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-app-dev]
    if: always() && (needs.deploy-app-dev.result == 'success' || needs.deploy-app-prod.result == 'success')
    steps:
    - name: Health check endpoint
      run: |
        function_app_url="${{ needs.deploy-infra-dev.outputs.functionAppUrl || needs.deploy-infra-prod.outputs.functionAppUrl }}"
        echo "Checking health of: $function_app_url"
        
        # Wait for function to be ready
        sleep 60
        
        # Simple health check - adjust based on your health endpoint
        curl -f $function_app_url/api/health || curl -f $function_app_url

    - name: Post deployment comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **SOCBot Deployment Complete**
            
            **Environment:** ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}
            **Function App:** ${{ needs.deploy-infra-dev.outputs.functionAppName || needs.deploy-infra-prod.outputs.functionAppName }}
            **URL:** ${{ needs.deploy-infra-dev.outputs.functionAppUrl || needs.deploy-infra-prod.outputs.functionAppUrl }}
            
            ✅ Infrastructure deployed with User Assigned Managed Identity
            ✅ RBAC roles configured for minimum privileges
            ✅ Application code deployed successfully
            
            **Next Steps:**
            1. Test bot functionality in Teams
            2. Verify AI agent integration
            3. Monitor Application Insights for any issues`
          })