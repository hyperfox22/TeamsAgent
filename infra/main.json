{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "3655703668335021498"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for deployment"
      }
    },
    "baseName": {
      "type": "string",
      "defaultValue": "socai",
      "metadata": {
        "description": "Base name (short) used as prefix in resource names"
      }
    },
    "env": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "qa",
        "prod"
      ],
      "metadata": {
        "description": "Environment - drives naming and tags"
      }
    },
    "deployBot": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Bot Service registration"
      }
    },
    "enableTeamsChannel": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Teams channel (post-provision configuration may still be needed)"
      }
    },
    "deployOpenAI": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Azure OpenAI (preview / gated access)"
      }
    },
    "deployAiHub": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy AI Hub (ML Workspace placeholder)"
      }
    },
    "deployAiFoundry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy AI Foundry (Azure AI Services) account with project & model"
      }
    },
    "deployLogicApps": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Logic Apps (notification + initial triage)"
      }
    },
    "deploySentinel": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Log Analytics + Microsoft Sentinel (SecurityInsights solution)"
      }
    },
    "storageBlobRoleMode": {
      "type": "string",
      "defaultValue": "Contributor",
      "allowedValues": [
        "None",
        "Contributor",
        "Owner"
      ],
      "metadata": {
        "description": "Storage blob role mode for UAMI"
      }
    },
    "assignMonitoringMetricsPublisher": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Assign Monitoring Metrics Publisher on App Insights to allow custom metric emission"
      }
    },
    "assignOpenAIUserRole": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Assign Cognitive Services OpenAI User role when OpenAI deployed"
      }
    },
    "assignSearchRoles": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Assign Search Service Contributor & Search Index Data Contributor roles"
      }
    },
    "assignKvSecretsUser": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Assign Key Vault Secrets User role to the managed identity"
      }
    },
    "assignCosmosControlPlaneRole": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Assign a control plane Cosmos DB role (e.g., DocumentDB Account Contributor) to the user-assigned managed identity"
      }
    },
    "cosmosControlPlaneRoleDefinitionId": {
      "type": "string",
      "defaultValue": "5bd9cd88-fe45-4216-938b-f97437e15450",
      "metadata": {
        "description": "Control plane Cosmos DB role definition ID (default: DocumentDB Account Contributor)"
      }
    },
    "logAnalyticsRetention": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 30,
      "maxValue": 730,
      "metadata": {
        "description": "Log Analytics workspace retention in days"
      }
    },
    "cosmosDbName": {
      "type": "string",
      "defaultValue": "appdb",
      "metadata": {
        "description": "Cosmos DB database name"
      }
    },
    "cosmosLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Override region for Cosmos DB (leave empty to use overall location)"
      }
    },
    "cosmosAccountNameOverride": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional explicit Cosmos DB account name (must be globally unique). Leave empty to derive."
      }
    },
    "cosmosAccountRandomSuffix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional random suffix seed (leave empty to skip). When provided, a uniqueString() hash will be appended to Cosmos account name unless override is used."
      }
    },
    "enableCosmosFreeTier": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Cosmos DB free tier (only allowed once per subscription)."
      }
    },
    "cosmosContainers": {
      "type": "array",
      "defaultValue": [
        {
          "name": "conversations",
          "partitionKey": "/id"
        },
        {
          "name": "incidents",
          "partitionKey": "/id"
        },
        {
          "name": "messages",
          "partitionKey": "/conversationId"
        }
      ],
      "metadata": {
        "description": "Cosmos DB containers specification"
      }
    },
    "functionNodeVersion": {
      "type": "string",
      "defaultValue": "20",
      "metadata": {
        "description": "Node.js version for Function runtime"
      }
    },
    "functionPlanSku": {
      "type": "string",
      "defaultValue": "Y1",
      "metadata": {
        "description": "Plan SKU (Y1 = Consumption, EP1 = Elastic Premium, S1 = Standard)"
      }
    },
    "functionMaxElasticWorkers": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Max elastic workers (Consumption/E* tiers)"
      }
    },
    "functionUseLinux": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Run Function App on Linux (true) or Windows (false)"
      }
    },
    "functionAppNameOverride": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional Function App name override (leave empty to use derived)"
      }
    },
    "functionAppScaleLimit": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {
        "description": "Function App instance scale limit"
      }
    },
    "functionRuntimeMemoryMB": {
      "type": "int",
      "defaultValue": 1536,
      "metadata": {
        "description": "Function runtime memory MB (advisory)"
      }
    },
    "storageSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Storage SKU"
      }
    },
    "storageAccountNameOverride": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional explicit Storage Account name (3-24 lowercase letters/numbers). Leave empty to derive."
      }
    },
    "storageAccountRandomSuffix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional random suffix seed for Storage Account. Adds 4-char deterministic hash if provided."
      }
    },
    "keyVaultSku": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": [
        "standard",
        "premium"
      ],
      "metadata": {
        "description": "Key Vault SKU"
      }
    },
    "restoreKeyVault": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Attempt restore of soft-deleted Key Vault with same name"
      }
    },
    "searchReplicaCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Azure AI Search replica count"
      }
    },
    "searchPartitionCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Azure AI Search partition count"
      }
    },
    "botSku": {
      "type": "string",
      "defaultValue": "F0",
      "allowedValues": [
        "F0",
        "S1"
      ],
      "metadata": {
        "description": "Bot Service SKU"
      }
    },
    "openAIChatCapacity": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Deploy OpenAI chat model capacity units"
      }
    },
    "openAIEmbeddingCapacity": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Deploy OpenAI embedding model capacity units"
      }
    },
    "teamsAppId": {
      "type": "string",
      "defaultValue": "00000000-0000-0000-0000-000000000000",
      "metadata": {
        "description": "Microsoft Teams App (manifest) ID"
      }
    },
    "botMsaAppId": {
      "type": "string",
      "minLength": 36,
      "metadata": {
        "description": "Existing Bot AAD (MSA) App Registration Client ID (required when deployBot=true)"
      }
    },
    "userAssignedIdentityName": {
      "type": "string",
      "defaultValue": "[format('{0}{1}-uami', parameters('baseName'), toLower(parameters('env')))]",
      "metadata": {
        "description": "Name of user-assigned managed identity (will be created)"
      }
    },
    "chatModelName": {
      "type": "string",
      "defaultValue": "gpt-4.1-mini",
      "metadata": {
        "description": "Chat model deployment name"
      }
    },
    "chatModelVersion": {
      "type": "string",
      "defaultValue": "2025-04-14",
      "metadata": {
        "description": "Chat model version"
      }
    },
    "embeddingModelName": {
      "type": "string",
      "defaultValue": "text-embedding-3-small",
      "metadata": {
        "description": "Embedding model deployment name"
      }
    },
    "embeddingModelVersion": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "Embedding model version"
      }
    },
    "aiFoundryProjectName": {
      "type": "string",
      "defaultValue": "hyperSOC",
      "metadata": {
        "description": "AI Foundry project name"
      }
    }
  },
  "variables": {
    "lowerEnv": "[toLower(parameters('env'))]",
    "nameRoot": "[toLower(format('{0}{1}', parameters('baseName'), variables('lowerEnv')))]",
    "storageBaseName": "[format('{0}st', variables('nameRoot'))]",
    "storageWithSuffix": "[if(empty(parameters('storageAccountRandomSuffix')), variables('storageBaseName'), format('{0}{1}', variables('storageBaseName'), substring(uniqueString(resourceGroup().id, parameters('storageAccountRandomSuffix')), 0, 4)))]",
    "storageNameRaw": "[if(empty(parameters('storageAccountNameOverride')), variables('storageWithSuffix'), parameters('storageAccountNameOverride'))]",
    "storageName": "[if(greater(length(variables('storageNameRaw')), 24), substring(toLower(variables('storageNameRaw')), 0, 24), toLower(variables('storageNameRaw')))]",
    "kvName": "[format('{0}-kv', variables('nameRoot'))]",
    "funcBaseName": "[format('{0}-funcapp', variables('nameRoot'))]",
    "funcName": "[if(empty(parameters('functionAppNameOverride')), variables('funcBaseName'), parameters('functionAppNameOverride'))]",
    "aiName": "[format('{0}-appi', variables('nameRoot'))]",
    "cosmosName": "[format('{0}-cos', variables('nameRoot'))]",
    "cosmosBase": "[variables('cosmosName')]",
    "cosmosWithSuffix": "[if(empty(parameters('cosmosAccountRandomSuffix')), variables('cosmosBase'), format('{0}{1}', variables('cosmosBase'), substring(uniqueString(resourceGroup().id, parameters('cosmosAccountRandomSuffix')), 0, 6)))]",
    "effectiveCosmosName": "[if(empty(parameters('cosmosAccountNameOverride')), variables('cosmosWithSuffix'), parameters('cosmosAccountNameOverride'))]",
    "effectiveCosmosLocation": "[if(empty(parameters('cosmosLocation')), parameters('location'), parameters('cosmosLocation'))]",
    "searchName": "[format('{0}-srch', variables('nameRoot'))]",
    "botName": "[format('{0}-bot', variables('nameRoot'))]",
    "openAIName": "[format('{0}-oai', variables('nameRoot'))]",
    "aiHubName": "[format('{0}-aihub', variables('nameRoot'))]",
    "aiFoundryName": "[format('{0}-aifoundry', variables('nameRoot'))]",
    "lawName": "[format('{0}-law', variables('nameRoot'))]",
    "functionAppDefaultHostname": "[format('{0}.azurewebsites.net', variables('funcName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[parameters('userAssignedIdentityName')]",
      "location": "[parameters('location')]",
      "tags": {
        "environment": "[parameters('env')]",
        "azd-env-name": "[parameters('env')]",
        "application": "socbot",
        "component": "identity"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('aiName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      },
      "tags": {
        "environment": "[parameters('env')]",
        "azd-env-name": "[parameters('env')]",
        "application": "socbot",
        "component": "monitoring"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('storageName')]"
          },
          "skuName": {
            "value": "[parameters('storageSku')]"
          },
          "environmentName": {
            "value": "[parameters('env')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "13474824050263380509"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Storage account location"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Storage account name"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "Storage account SKU name"
              }
            },
            "environmentName": {
              "type": "string",
              "defaultValue": "dev",
              "metadata": {
                "description": "Environment name for tagging"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "kind": "StorageV2",
              "properties": {
                "supportsHttpsTrafficOnly": true,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "networkAcls": {
                  "defaultAction": "Allow"
                },
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                }
              },
              "tags": {
                "environment": "[parameters('environmentName')]",
                "azd-env-name": "[parameters('environmentName')]",
                "application": "socbot",
                "component": "storage"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('name'), 'default')]",
              "properties": {
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "primaryEndpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2023-01-01').primaryEndpoints]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyvault",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('kvName')]"
          },
          "skuName": {
            "value": "[parameters('keyVaultSku')]"
          },
          "restore": {
            "value": "[parameters('restoreKeyVault')]"
          },
          "environmentName": {
            "value": "[parameters('env')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16480152028436354209"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Key Vault location"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Key Vault name"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "Key Vault SKU name"
              }
            },
            "restore": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Restore soft-deleted Key Vault"
              }
            },
            "environmentName": {
              "type": "string",
              "defaultValue": "dev",
              "metadata": {
                "description": "Environment name for tagging"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "[parameters('skuName')]"
                },
                "tenantId": "[tenant().tenantId]",
                "enabledForDeployment": false,
                "enabledForTemplateDeployment": false,
                "enabledForDiskEncryption": false,
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 30,
                "enablePurgeProtection": false,
                "publicNetworkAccess": "Enabled"
              },
              "tags": {
                "environment": "[parameters('environmentName')]",
                "azd-env-name": "[parameters('environmentName')]",
                "application": "socbot",
                "component": "keyvault"
              }
            }
          ],
          "outputs": {
            "keyVaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2023-07-01').vaultUri]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmos",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('effectiveCosmosLocation')]"
          },
          "accountName": {
            "value": "[variables('effectiveCosmosName')]"
          },
          "dbName": {
            "value": "[parameters('cosmosDbName')]"
          },
          "containers": {
            "value": "[parameters('cosmosContainers')]"
          },
          "enableFreeTier": {
            "value": "[parameters('enableCosmosFreeTier')]"
          },
          "environmentName": {
            "value": "[parameters('env')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16772592724449551766"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Cosmos DB location"
              }
            },
            "accountName": {
              "type": "string",
              "metadata": {
                "description": "Cosmos DB account name"
              }
            },
            "dbName": {
              "type": "string",
              "metadata": {
                "description": "Database name"
              }
            },
            "containers": {
              "type": "array",
              "metadata": {
                "description": "Container specifications"
              }
            },
            "enableFreeTier": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable free tier"
              }
            },
            "environmentName": {
              "type": "string",
              "defaultValue": "dev",
              "metadata": {
                "description": "Environment name for tagging"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[parameters('accountName')]",
              "location": "[parameters('location')]",
              "kind": "GlobalDocumentDB",
              "properties": {
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "databaseAccountOfferType": "Standard",
                "enableFreeTier": "[parameters('enableFreeTier')]",
                "capabilities": [
                  {
                    "name": "EnableServerless"
                  }
                ]
              },
              "tags": {
                "environment": "[parameters('environmentName')]",
                "azd-env-name": "[parameters('environmentName')]",
                "application": "socbot",
                "component": "cosmos"
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('accountName'), parameters('dbName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('dbName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
              ]
            },
            {
              "copy": {
                "name": "cosmosContainers",
                "count": "[length(parameters('containers'))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('dbName'), parameters('containers')[copyIndex()].name)]",
              "properties": {
                "resource": {
                  "id": "[parameters('containers')[copyIndex()].name]",
                  "partitionKey": {
                    "paths": [
                      "[parameters('containers')[copyIndex()].partitionKey]"
                    ],
                    "kind": "Hash"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('accountName'), parameters('dbName'))]"
              ]
            }
          ],
          "outputs": {
            "accountName": {
              "type": "string",
              "value": "[parameters('accountName')]"
            },
            "accountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName'))]"
            },
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('accountName')), '2023-04-15').documentEndpoint]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('searchName')]"
          },
          "replicaCount": {
            "value": "[parameters('searchReplicaCount')]"
          },
          "partitionCount": {
            "value": "[parameters('searchPartitionCount')]"
          },
          "environmentName": {
            "value": "[parameters('env')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11141295435916771957"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Search service location"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Search service name"
              }
            },
            "replicaCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Replica count"
              }
            },
            "partitionCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Partition count"
              }
            },
            "environmentName": {
              "type": "string",
              "defaultValue": "dev",
              "metadata": {
                "description": "Environment name for tagging"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2023-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "free"
              },
              "properties": {
                "replicaCount": "[parameters('replicaCount')]",
                "partitionCount": "[parameters('partitionCount')]",
                "hostingMode": "default",
                "publicNetworkAccess": "enabled",
                "networkRuleSet": {
                  "ipRules": []
                }
              },
              "tags": {
                "environment": "[parameters('environmentName')]",
                "azd-env-name": "[parameters('environmentName')]",
                "application": "socbot",
                "component": "search"
              }
            }
          ],
          "outputs": {
            "searchServiceName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "searchServiceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Search/searchServices', parameters('name'))]"
            },
            "searchServiceUrl": {
              "type": "string",
              "value": "[format('https://{0}.search.windows.net/', parameters('name'))]"
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('deployBot')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "bot",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('botName')]"
          },
          "sku": {
            "value": "[parameters('botSku')]"
          },
          "enableTeamsChannel": {
            "value": "[parameters('enableTeamsChannel')]"
          },
          "msaAppId": {
            "value": "[parameters('botMsaAppId')]"
          },
          "endpoint": {
            "value": "[format('https://{0}/api/messages', variables('functionAppDefaultHostname'))]"
          },
          "environmentName": {
            "value": "[parameters('env')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12465203623660571991"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "Bot service location"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Bot service name"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "F0",
              "metadata": {
                "description": "Bot service SKU"
              }
            },
            "enableTeamsChannel": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable Teams channel"
              }
            },
            "msaAppId": {
              "type": "string",
              "metadata": {
                "description": "Microsoft App ID"
              }
            },
            "endpoint": {
              "type": "string",
              "metadata": {
                "description": "Bot endpoint URL"
              }
            },
            "environmentName": {
              "type": "string",
              "defaultValue": "dev",
              "metadata": {
                "description": "Environment name for tagging"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.BotService/botServices",
              "apiVersion": "2022-09-15",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "kind": "azurebot",
              "properties": {
                "displayName": "SOCBot",
                "description": "Security Operations Center Teams Bot",
                "endpoint": "[parameters('endpoint')]",
                "msaAppId": "[parameters('msaAppId')]",
                "msaAppType": "SingleTenant",
                "schemaTransformationVersion": "1.3"
              },
              "tags": {
                "environment": "[parameters('environmentName')]",
                "azd-env-name": "[parameters('environmentName')]",
                "application": "socbot",
                "component": "bot-service"
              }
            },
            {
              "condition": "[parameters('enableTeamsChannel')]",
              "type": "Microsoft.BotService/botServices/channels",
              "apiVersion": "2022-09-15",
              "name": "[format('{0}/{1}', parameters('name'), 'MsTeamsChannel')]",
              "location": "[parameters('location')]",
              "properties": {
                "channelName": "MsTeamsChannel",
                "properties": {
                  "isEnabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.BotService/botServices', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "botId": {
              "type": "string",
              "value": "[resourceId('Microsoft.BotService/botServices', parameters('name'))]"
            },
            "botName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "botEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.BotService/botServices', parameters('name')), '2022-09-15').endpoint]"
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('deployAiFoundry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aifoundry",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "accountName": {
            "value": "[variables('aiFoundryName')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
          },
          "deployModel": {
            "value": true
          },
          "modelName": {
            "value": "[parameters('chatModelName')]"
          },
          "modelVersion": {
            "value": "[parameters('chatModelVersion')]"
          },
          "modelSkuName": {
            "value": "GlobalStandard"
          },
          "modelCapacity": {
            "value": "[parameters('openAIChatCapacity')]"
          },
          "projectName": {
            "value": "[parameters('aiFoundryProjectName')]"
          },
          "deployDefenderForAI": {
            "value": false
          },
          "defenderForAIState": {
            "value": "Disabled"
          },
          "deployRaiPolicyDefault": {
            "value": true
          },
          "deployRaiPolicyDefaultV2": {
            "value": true
          },
          "modelRaiPolicyName": {
            "value": "Microsoft.DefaultV2"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "3117569406496578315"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for AI Foundry (Azure AI Services) account"
              }
            },
            "accountName": {
              "type": "string",
              "metadata": {
                "description": "AI Foundry account name"
              }
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "metadata": {
                "description": "User-assigned managed identity resource ID to attach"
              }
            },
            "deployModel": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Deploy model deployment"
              }
            },
            "modelName": {
              "type": "string",
              "defaultValue": "gpt-4.1-mini",
              "metadata": {
                "description": "Model (deployment) name"
              }
            },
            "modelVersion": {
              "type": "string",
              "defaultValue": "2025-04-14",
              "metadata": {
                "description": "Model version"
              }
            },
            "modelSkuName": {
              "type": "string",
              "defaultValue": "GlobalStandard",
              "metadata": {
                "description": "Model SKU name (e.g. GlobalStandard, Standard)"
              }
            },
            "modelCapacity": {
              "type": "int",
              "defaultValue": 30,
              "minValue": 1,
              "metadata": {
                "description": "Model capacity units"
              }
            },
            "projectName": {
              "type": "string",
              "defaultValue": "hyperSOC",
              "metadata": {
                "description": "AI Foundry project name"
              }
            },
            "deployDefenderForAI": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Deploy Defender for AI settings resource"
              }
            },
            "defenderForAIState": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Defender for AI state (Enabled/Disabled)"
              }
            },
            "deployRaiPolicyDefault": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Deploy Microsoft.Default RAI Policy"
              }
            },
            "deployRaiPolicyDefaultV2": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Deploy Microsoft.DefaultV2 RAI Policy"
              }
            },
            "modelRaiPolicyName": {
              "type": "string",
              "defaultValue": "Microsoft.DefaultV2",
              "allowedValues": [
                "Microsoft.Default",
                "Microsoft.DefaultV2"
              ],
              "metadata": {
                "description": "RAI policy name to associate with model deployment (must match one deployed)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-06-01",
              "name": "[parameters('accountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                }
              },
              "properties": {
                "apiProperties": {},
                "customSubDomainName": "[parameters('accountName')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "allowProjectManagement": true,
                "defaultProject": "[parameters('projectName')]",
                "associatedProjects": [
                  "[parameters('projectName')]"
                ],
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "condition": "[parameters('deployDefenderForAI')]",
              "type": "Microsoft.CognitiveServices/accounts/defenderForAISettings",
              "apiVersion": "2025-06-01",
              "name": "[format('{0}/{1}', parameters('accountName'), 'Default')]",
              "properties": {
                "state": "[parameters('defenderForAIState')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('accountName'))]"
              ]
            },
            {
              "condition": "[parameters('deployRaiPolicyDefault')]",
              "type": "Microsoft.CognitiveServices/accounts/raiPolicies",
              "apiVersion": "2025-06-01",
              "name": "[format('{0}/{1}', parameters('accountName'), 'Microsoft.Default')]",
              "properties": {
                "mode": "Blocking",
                "contentFilters": [
                  {
                    "name": "Hate",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Prompt"
                  },
                  {
                    "name": "Hate",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Completion"
                  },
                  {
                    "name": "Sexual",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Prompt"
                  },
                  {
                    "name": "Sexual",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Completion"
                  },
                  {
                    "name": "Violence",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Prompt"
                  },
                  {
                    "name": "Violence",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Completion"
                  },
                  {
                    "name": "Selfharm",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Prompt"
                  },
                  {
                    "name": "Selfharm",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Completion"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('accountName'))]"
              ]
            },
            {
              "condition": "[parameters('deployRaiPolicyDefaultV2')]",
              "type": "Microsoft.CognitiveServices/accounts/raiPolicies",
              "apiVersion": "2025-06-01",
              "name": "[format('{0}/{1}', parameters('accountName'), 'Microsoft.DefaultV2')]",
              "properties": {
                "mode": "Blocking",
                "contentFilters": [
                  {
                    "name": "Hate",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Prompt"
                  },
                  {
                    "name": "Hate",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Completion"
                  },
                  {
                    "name": "Sexual",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Prompt"
                  },
                  {
                    "name": "Sexual",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Completion"
                  },
                  {
                    "name": "Violence",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Prompt"
                  },
                  {
                    "name": "Violence",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Completion"
                  },
                  {
                    "name": "Selfharm",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Prompt"
                  },
                  {
                    "name": "Selfharm",
                    "severityThreshold": "Medium",
                    "blocking": true,
                    "enabled": true,
                    "source": "Completion"
                  },
                  {
                    "name": "Jailbreak",
                    "blocking": true,
                    "enabled": true,
                    "source": "Prompt"
                  },
                  {
                    "name": "Protected Material Text",
                    "blocking": true,
                    "enabled": true,
                    "source": "Completion"
                  },
                  {
                    "name": "Protected Material Code",
                    "blocking": false,
                    "enabled": true,
                    "source": "Completion"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('accountName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-06-01",
              "name": "[format('{0}/{1}', parameters('accountName'), parameters('projectName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "description": "Default project created with the resource",
                "displayName": "[parameters('projectName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('accountName'))]"
              ]
            },
            {
              "condition": "[parameters('deployModel')]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2025-06-01",
              "name": "[format('{0}/{1}', parameters('accountName'), parameters('modelName'))]",
              "sku": {
                "name": "[parameters('modelSkuName')]",
                "capacity": "[parameters('modelCapacity')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('modelName')]",
                  "version": "[parameters('modelVersion')]"
                },
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable",
                "currentCapacity": "[parameters('modelCapacity')]",
                "raiPolicyName": "[parameters('modelRaiPolicyName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('accountName'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName'))]"
              ]
            }
          ],
          "outputs": {
            "aiFoundryAccountName": {
              "type": "string",
              "value": "[parameters('accountName')]"
            },
            "aiFoundryProjectName": {
              "type": "string",
              "value": "[parameters('projectName')]"
            },
            "aiFoundryModelDeploymentName": {
              "type": "string",
              "value": "[if(parameters('deployModel'), parameters('modelName'), '')]"
            },
            "aiFoundryRaiPolicyUsed": {
              "type": "string",
              "value": "[parameters('modelRaiPolicyName')]"
            },
            "aiFoundryEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('accountName')), '2025-06-01').endpoint]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "functionapp",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('funcName')]"
          },
          "planName": {
            "value": "[format('{0}-plan', variables('funcName'))]"
          },
          "planSku": {
            "value": "[parameters('functionPlanSku')]"
          },
          "nodeVersion": {
            "value": "[parameters('functionNodeVersion')]"
          },
          "maxElasticWorkers": {
            "value": "[parameters('functionMaxElasticWorkers')]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.storageAccountName.value]"
          },
          "additionalAppSettings": {
            "value": [
              {
                "name": "COSMOS_ACCOUNT_NAME",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos'), '2022-09-01').outputs.accountName.value]"
              },
              {
                "name": "COSMOS_DATABASE",
                "value": "[parameters('cosmosDbName')]"
              },
              {
                "name": "COSMOS_CONTAINER",
                "value": "conversations"
              },
              {
                "name": "KEYVAULT_NAME",
                "value": "[variables('kvName')]"
              },
              {
                "name": "SEARCH_SERVICE_NAME",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', 'search'), '2022-09-01').outputs.searchServiceName.value]"
              },
              {
                "name": "TEAMS_APP_ID",
                "value": "[parameters('teamsAppId')]"
              },
              {
                "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                "value": "[reference(resourceId('Microsoft.Insights/components', variables('aiName')), '2020-02-02').ConnectionString]"
              },
              {
                "name": "AI_FOUNDRY_ACCOUNT_NAME",
                "value": "[if(parameters('deployAiFoundry'), variables('aiFoundryName'), '')]"
              },
              {
                "name": "AI_FOUNDRY_ENDPOINT",
                "value": "[if(parameters('deployAiFoundry'), format('https://{0}.cognitiveservices.azure.com/', variables('aiFoundryName')), '')]"
              },
              {
                "name": "AI_FOUNDRY_PROJECT_NAME",
                "value": "[if(parameters('deployAiFoundry'), 'socbot', '')]"
              }
            ]
          },
          "userAssignedIdentityResourceId": {
            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
          },
          "useLinux": {
            "value": "[parameters('functionUseLinux')]"
          },
          "appInsightsResourceId": {
            "value": "[resourceId('Microsoft.Insights/components', variables('aiName'))]"
          },
          "functionAppScaleLimit": {
            "value": "[parameters('functionAppScaleLimit')]"
          },
          "functionRuntimeMemoryMB": {
            "value": "[parameters('functionRuntimeMemoryMB')]"
          },
          "environmentName": {
            "value": "[parameters('env')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16286760854853059977"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Function App location"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Function App name"
              }
            },
            "planName": {
              "type": "string",
              "metadata": {
                "description": "Plan name"
              }
            },
            "planSku": {
              "type": "string",
              "defaultValue": "Y1",
              "metadata": {
                "description": "Plan SKU (Y1, EP1, S1, etc)"
              }
            },
            "nodeVersion": {
              "type": "string",
              "defaultValue": "20",
              "metadata": {
                "description": "Node (major) runtime version, e.g. 20 or 22"
              }
            },
            "useLinux": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Deploy on Linux (true) or Windows (false)"
              }
            },
            "maxElasticWorkers": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Max elastic workers (Consumption/E*)"
              }
            },
            "appInsightsResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional App Insights resource ID to tag for deep linking"
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Backing storage account name (for AzureWebJobsStorage)"
              }
            },
            "additionalAppSettings": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional additional app settings (array of objects { name, value })"
              }
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "User-assigned managed identity resource ID to attach"
              }
            },
            "environmentName": {
              "type": "string",
              "defaultValue": "dev",
              "metadata": {
                "description": "Environment name for resource tagging"
              }
            },
            "functionAppScaleLimit": {
              "type": "int",
              "defaultValue": 100,
              "metadata": {
                "description": "Function App scale limit"
              }
            },
            "functionRuntimeMemoryMB": {
              "type": "int",
              "defaultValue": 1536,
              "metadata": {
                "description": "Function runtime memory MB"
              }
            }
          },
          "variables": {
            "planTier": "[if(startsWith(parameters('planSku'), 'Y'), 'Dynamic', if(startsWith(parameters('planSku'), 'EP'), 'ElasticPremium', 'Standard'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2023-01-01",
              "name": "[parameters('planName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('planSku')]",
                "capacity": "[if(equals(parameters('planSku'), 'Y1'), 0, 1)]"
              },
              "properties": {
                "maximumElasticWorkerCount": "[if(equals(variables('planTier'), 'Dynamic'), parameters('maxElasticWorkers'), null())]",
                "reserved": "[parameters('useLinux')]"
              },
              "tags": {
                "environment": "[parameters('environmentName')]",
                "azd-env-name": "[parameters('environmentName')]",
                "application": "socbot",
                "component": "function-app-plan"
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-01-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[if(parameters('useLinux'), 'functionapp,linux', 'functionapp')]",
              "identity": "[if(empty(parameters('userAssignedIdentityResourceId')), null(), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('userAssignedIdentityResourceId')), createObject())))]",
              "tags": "[union(createObject('environment', parameters('environmentName'), 'azd-env-name', parameters('environmentName'), 'application', 'socbot', 'component', 'function-app'), if(empty(parameters('appInsightsResourceId')), createObject(), createObject('hidden-link: /app-insights-resource-id', parameters('appInsightsResourceId'))))]",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('planName'))]",
                "httpsOnly": true,
                "siteConfig": {
                  "linuxFxVersion": "[if(parameters('useLinux'), format('NODE|{0}', parameters('nodeVersion')), null())]",
                  "appSettings": "[union(union(createArray(createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', 'node'), createObject('name', 'WEBSITE_NODE_DEFAULT_VERSION', 'value', parameters('nodeVersion')), createObject('name', 'AzureWebJobsStorage', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', parameters('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').keys[0].value)), createObject('name', 'WEBSITE_RUN_FROM_PACKAGE', 'value', '1'), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4')), if(parameters('useLinux'), createArray(), createArray(createObject('name', 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', parameters('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').keys[0].value)), createObject('name', 'WEBSITE_CONTENTSHARE', 'value', toLower(replace(parameters('name'), '-', '')))))), parameters('additionalAppSettings'))]",
                  "cors": {
                    "allowedOrigins": [
                      "*"
                    ]
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('planName'))]"
              ]
            }
          ],
          "outputs": {
            "hostname": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2023-01-01').defaultHostName]"
            },
            "functionAppName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "functionAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
            },
            "functionAppUrl": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('name')), '2023-01-01').defaultHostName)]"
            },
            "planId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('planName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('aiName'))]",
        "[resourceId('Microsoft.Resources/deployments', 'cosmos')]",
        "[resourceId('Microsoft.Resources/deployments', 'search')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "identityRoles",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]"
          },
          "identityResourceId": {
            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
          },
          "keyVaultName": {
            "value": "[variables('kvName')]"
          },
          "assignKvSecretsUser": {
            "value": "[parameters('assignKvSecretsUser')]"
          },
          "assignCosmosControlPlaneRole": {
            "value": "[parameters('assignCosmosControlPlaneRole')]"
          },
          "cosmosControlPlaneRoleDefinitionId": {
            "value": "[parameters('cosmosControlPlaneRoleDefinitionId')]"
          },
          "cosmosAccountName": {
            "value": "[variables('effectiveCosmosName')]"
          },
          "storageAccountName": {
            "value": "[variables('storageName')]"
          },
          "searchServiceName": {
            "value": "[variables('searchName')]"
          },
          "openAIAccountName": {
            "value": "[variables('openAIName')]"
          },
          "deployOpenAI": {
            "value": "[parameters('deployOpenAI')]"
          },
          "storageBlobRoleMode": {
            "value": "[parameters('storageBlobRoleMode')]"
          },
          "assignMonitoringMetricsPublisher": {
            "value": "[parameters('assignMonitoringMetricsPublisher')]"
          },
          "appInsightsName": {
            "value": "[variables('aiName')]"
          },
          "assignSearchRoles": {
            "value": "[parameters('assignSearchRoles')]"
          },
          "assignOpenAIUserRole": {
            "value": "[parameters('assignOpenAIUserRole')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "13209273712752719930"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Managed identity principal ID"
              }
            },
            "identityResourceId": {
              "type": "string",
              "metadata": {
                "description": "Managed identity resource ID"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Key Vault name"
              }
            },
            "assignKvSecretsUser": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Assign Key Vault Secrets User role"
              }
            },
            "assignCosmosControlPlaneRole": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Assign Cosmos control plane role"
              }
            },
            "cosmosControlPlaneRoleDefinitionId": {
              "type": "string",
              "defaultValue": "5bd9cd88-fe45-4216-938b-f97437e15450",
              "metadata": {
                "description": "Cosmos control plane role definition ID"
              }
            },
            "cosmosAccountName": {
              "type": "string",
              "metadata": {
                "description": "Cosmos account name"
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Storage account name"
              }
            },
            "searchServiceName": {
              "type": "string",
              "metadata": {
                "description": "Search service name"
              }
            },
            "openAIAccountName": {
              "type": "string",
              "metadata": {
                "description": "OpenAI account name"
              }
            },
            "deployOpenAI": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Deploy OpenAI flag"
              }
            },
            "storageBlobRoleMode": {
              "type": "string",
              "defaultValue": "Contributor",
              "allowedValues": [
                "None",
                "Contributor",
                "Owner"
              ],
              "metadata": {
                "description": "Storage blob role mode"
              }
            },
            "assignMonitoringMetricsPublisher": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Assign monitoring metrics publisher role"
              }
            },
            "appInsightsName": {
              "type": "string",
              "metadata": {
                "description": "Application Insights name"
              }
            },
            "assignSearchRoles": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Assign search roles"
              }
            },
            "assignOpenAIUserRole": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Assign OpenAI user role"
              }
            }
          },
          "variables": {
            "keyVaultSecretsUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",
            "storageBlobDataContributorRoleId": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
            "storageBlobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
            "monitoringMetricsPublisherRoleId": "3913510d-42f4-4e42-8a64-420c390055eb",
            "searchServiceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0",
            "searchIndexDataContributorRoleId": "1243389d-3a3e-41f8-aee6-ef6e7fea8a4e",
            "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd"
          },
          "resources": [
            {
              "condition": "[parameters('assignKvSecretsUser')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('principalId'), variables('keyVaultSecretsUserRoleId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultSecretsUserRoleId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(equals(parameters('storageBlobRoleMode'), 'None'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('principalId'), if(equals(parameters('storageBlobRoleMode'), 'Owner'), variables('storageBlobDataOwnerRoleId'), variables('storageBlobDataContributorRoleId')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', if(equals(parameters('storageBlobRoleMode'), 'Owner'), variables('storageBlobDataOwnerRoleId'), variables('storageBlobDataContributorRoleId')))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[parameters('assignCosmosControlPlaneRole')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('cosmosAccountName'))]",
              "name": "[guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosAccountName')), parameters('principalId'), parameters('cosmosControlPlaneRoleDefinitionId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('cosmosControlPlaneRoleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[parameters('assignMonitoringMetricsPublisher')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('appInsightsName'))]",
              "name": "[guid(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), parameters('principalId'), variables('monitoringMetricsPublisherRoleId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('monitoringMetricsPublisherRoleId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[parameters('assignSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('searchServiceName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('searchServiceName')), parameters('principalId'), variables('searchServiceContributorRoleId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchServiceContributorRoleId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[parameters('assignSearchRoles')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('searchServiceName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('searchServiceName')), parameters('principalId'), variables('searchIndexDataContributorRoleId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataContributorRoleId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[and(parameters('deployOpenAI'), parameters('assignOpenAIUserRole'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIAccountName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIAccountName')), parameters('principalId'), variables('cognitiveServicesOpenAIUserRoleId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIUserRoleId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "roleIds": {
              "type": "object",
              "value": {
                "keyVaultSecretsUser": "[variables('keyVaultSecretsUserRoleId')]",
                "storageBlobDataContributor": "[variables('storageBlobDataContributorRoleId')]",
                "storageBlobDataOwner": "[variables('storageBlobDataOwnerRoleId')]",
                "monitoringMetricsPublisher": "[variables('monitoringMetricsPublisherRoleId')]",
                "searchServiceContributor": "[variables('searchServiceContributorRoleId')]",
                "searchIndexDataContributor": "[variables('searchIndexDataContributorRoleId')]",
                "cognitiveServicesOpenAIUser": "[variables('cognitiveServicesOpenAIUserRoleId')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('aiName'))]",
        "[resourceId('Microsoft.Resources/deployments', 'cosmos')]",
        "[resourceId('Microsoft.Resources/deployments', 'keyvault')]",
        "[resourceId('Microsoft.Resources/deployments', 'search')]",
        "[resourceId('Microsoft.Resources/deployments', 'storage')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
      ]
    }
  ],
  "outputs": {
    "functionAppHostname": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'functionapp'), '2022-09-01').outputs.hostname.value]"
    },
    "functionAppName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'functionapp'), '2022-09-01').outputs.functionAppName.value]"
    },
    "functionAppUrl": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.Resources/deployments', 'functionapp'), '2022-09-01').outputs.hostname.value)]"
    },
    "botServiceName": {
      "type": "string",
      "value": "[if(parameters('deployBot'), variables('botName'), '')]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.storageAccountName.value]"
    },
    "searchServiceName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'search'), '2022-09-01').outputs.searchServiceName.value]"
    },
    "cosmosAccountName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cosmos'), '2022-09-01').outputs.accountName.value]"
    },
    "aiFoundryAccountName": {
      "type": "string",
      "value": "[if(parameters('deployAiFoundry'), variables('aiFoundryName'), '')]"
    },
    "aiFoundryEndpoint": {
      "type": "string",
      "value": "[if(parameters('deployAiFoundry'), format('https://{0}.cognitiveservices.azure.com/', variables('aiFoundryName')), '')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('kvName')]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "environmentName": {
      "type": "string",
      "value": "[parameters('env')]"
    }
  }
}